

import streamlit as st
import time
import os
import requests
from pathlib import Path
from streamlit_lottie import st_lottie
from style import pmdr_background
import datetime
import matplotlib.pyplot as plt


# Dictionary to store study time
if 'study_data' not in st.session_state:
    st.session_state.study_data = {}


# H√†m t·∫£i ho·∫°t h√¨nh Lottie t·ª´ URL
def load_lottieurl(url: str):
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    else:
        st.error("Kh√¥ng th·ªÉ t·∫£i ho·∫°t h√¨nh t·ª´ URL")
        return None


# URL c·ªßa ho·∫°t h√¨nh Lottie
lottie_url1 = "https://assets2.lottiefiles.com/packages/lf20_touohxv0.json"
lottie_url2 = "https://lottie.host/fcc5c4c9-c08c-460e-b991-5ab983ca4ad1/wwJITddgjD.json"


# T·∫£i ho·∫°t h√¨nh
lottie_json1 = load_lottieurl(lottie_url1)
lottie_json2 = load_lottieurl(lottie_url2)


def display_pomodoro():
    # Main title
    st.markdown(
        "<h1 style='text-align: center; font-size: 80px;'>FOCUS ZONE</h1>",
        unsafe_allow_html=True
    )


    # Timer countdown
    t1 = 25  # 25 minutes for focus
    t2 = 5   # 5 minutes for break


    # Start Button
    col1, col2, col3, cola, colb, colc, cold = st.columns([1, 1, 1, 1, 1, 1, 1])
    with cola:
        button_clicked = st.button("Start")


    # Countdown logic
    if button_clicked:
        st.write("### ƒêang h·ªçc...")
        with st.empty():
            while t1:
                mins, secs = divmod(t1, 60)
                st.markdown(
                    f"<h1 style='text-align: center; font-size: 200px;'>{mins:02d}:{secs:02d}</h1>",
                    unsafe_allow_html=True
                )
                time.sleep(1)
                t1 -= 1


            st.success("üîî 25 ph√∫t ƒë√£ k·∫øt th√∫c! Ngh·ªâ gi·∫£i lao ch√∫t n√†o!")


            # Ghi nh·∫≠n th·ªùi gian h·ªçc v√†o dictionary
            today = datetime.date.today().strftime("%Y-%m-%d")
            if today in st.session_state.study_data:
                st.session_state.study_data[today] += 25
            else:
                st.session_state.study_data[today] = 25


            st.write(f"Th·ªùi gian h·ªçc h√¥m nay: {st.session_state.study_data[today]} ph√∫t")


            placeholder = st.empty()
            with placeholder:
                st_lottie(
                    lottie_json1,
                    height=300,
                    key="lottie_25min_complete",
                )
                st.toast("üîîCh√∫c m·ª´ng b·∫°n ƒë√£ ho√†n th√†nh 25 ph√∫t H√£y ngh·ªâ gi·∫£i lao 5 ph√∫t nh√©!")
                time.sleep(4)  # Hi·ªÉn th·ªã trong 1 gi√¢y
            placeholder.empty()  # ·∫®n Lottie sau 1 gi√¢y


        with st.empty():
            st.toast("Break Time!!!")
            while t2:
                mins, secs = divmod(t2, 60)
                st.markdown(
                    f"<h1 style='text-align: center; font-size: 200px;'>{mins:02d}:{secs:02d}</h1>",
                    unsafe_allow_html=True
                )
                time.sleep(1)
                t2 -= 1


            # Hi·ªÉn th·ªã ho·∫°t h√¨nh Lottie khi h·∫øt 5 ph√∫t
            placeholder = st.empty()
            with placeholder:
                st_lottie(
                    lottie_json2,
                    height=300,
                    key="lottie_5min_complete",
                )
                time.sleep(2)  # Hi·ªÉn th·ªã trong 1 gi√¢y
            placeholder.empty()  # ·∫®n Lottie sau 1 gi√¢y


            st.error("‚è∞ 5 ph√∫t gi·∫£i lao ƒë√£ k·∫øt th√∫c!")


    # Music Section
    st.markdown("### üéµ Select Your Rhythm")


    # L·∫•y ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i
    current_dir = Path(__file__).parent
    assets_dir = current_dir / '../../assets'
    assets_dir = assets_dir.resolve()   # Chuy·ªÉn th√†nh ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi


    # File nh·∫°c
    music_files = {
        "Lofi Beats": assets_dir / 'lofi.mp3',
        "Classical Music": assets_dir / 'classic.mp3',
        "Healing Music": assets_dir / 'healing.mp3',
        "Piano Music": assets_dir / 'piano.mp3',
        "Electronic Music": assets_dir / 'edm.mp3'
    }


    # Dropdown ƒë·ªÉ ch·ªçn nh·∫°c
    selected_music = st.selectbox("Select a music track:", list(music_files.keys()))
    audio_file_path = music_files[selected_music]


    # Ki·ªÉm tra file nh·∫°c
    if not audio_file_path.exists():
        st.error(f"T·ªáp √¢m thanh kh√¥ng t·ªìn t·∫°i: {audio_file_path}")
    else:
        with open(audio_file_path, "rb") as audio_file:
            audio_bytes = audio_file.read()
            st.audio(audio_bytes, format="audio/mp3")


    # Display daily study chart
    if st.button("Xem bi·ªÉu ƒë·ªì th·ªùi gian h·ªçc"):
        if st.session_state.study_data:
            dates = list(st.session_state.study_data.keys())
            durations = list(st.session_state.study_data.values())


            # V·∫Ω bi·ªÉu ƒë·ªì b·∫±ng matplotlib
            fig, ax = plt.subplots()
            ax.bar(dates, durations, color='skyblue')
            ax.set_xlabel('Ng√†y')
            ax.set_ylabel('Th·ªùi gian h·ªçc (ph√∫t)')
            ax.set_title('Th·ªùi gian h·ªçc theo ph∆∞∆°ng ph√°p Pomodoro m·ªói ng√†y')
            plt.xticks(rotation=45)
            st.pyplot(fig)
        else:
            st.warning("Ch∆∞a c√≥ d·ªØ li·ªáu h·ªçc ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì!")


if __name__ == "__main__":
    display_pomodoro()







